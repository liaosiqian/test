// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: isp_discern.proto

package trpc_tme_songbank_isp_discern

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IpInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IpList []string `protobuf:"bytes,1,rep,name=ip_list,json=ipList,proto3" json:"ip_list,omitempty"`
}

func (x *IpInfoReq) Reset() {
	*x = IpInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isp_discern_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpInfoReq) ProtoMessage() {}

func (x *IpInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_isp_discern_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpInfoReq.ProtoReflect.Descriptor instead.
func (*IpInfoReq) Descriptor() ([]byte, []int) {
	return file_isp_discern_proto_rawDescGZIP(), []int{0}
}

func (x *IpInfoReq) GetIpList() []string {
	if x != nil {
		return x.IpList
	}
	return nil
}

type IpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country  string `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	Province string `protobuf:"bytes,2,opt,name=province,proto3" json:"province,omitempty"`
	City     string `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	District string `protobuf:"bytes,4,opt,name=district,proto3" json:"district,omitempty"`
	Isp      string `protobuf:"bytes,5,opt,name=isp,proto3" json:"isp,omitempty"`
}

func (x *IpInfo) Reset() {
	*x = IpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isp_discern_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpInfo) ProtoMessage() {}

func (x *IpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_isp_discern_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpInfo.ProtoReflect.Descriptor instead.
func (*IpInfo) Descriptor() ([]byte, []int) {
	return file_isp_discern_proto_rawDescGZIP(), []int{1}
}

func (x *IpInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *IpInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *IpInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *IpInfo) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *IpInfo) GetIsp() string {
	if x != nil {
		return x.Isp
	}
	return ""
}

type IpInfoRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result map[string]*IpInfo `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IpInfoRsp) Reset() {
	*x = IpInfoRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_isp_discern_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpInfoRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpInfoRsp) ProtoMessage() {}

func (x *IpInfoRsp) ProtoReflect() protoreflect.Message {
	mi := &file_isp_discern_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpInfoRsp.ProtoReflect.Descriptor instead.
func (*IpInfoRsp) Descriptor() ([]byte, []int) {
	return file_isp_discern_proto_rawDescGZIP(), []int{2}
}

func (x *IpInfoRsp) GetResult() map[string]*IpInfo {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_isp_discern_proto protoreflect.FileDescriptor

var file_isp_discern_proto_rawDesc = []byte{
	0x0a, 0x11, 0x69, 0x73, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x6d, 0x65, 0x5f, 0x73, 0x6f,
	0x6e, 0x67, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x69, 0x73, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x65,
	0x72, 0x6e, 0x22, 0x24, 0x0a, 0x09, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x49, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x73, 0x70,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x73, 0x70, 0x22, 0xbb, 0x01, 0x0a, 0x09,
	0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x72, 0x70, 0x63,
	0x2e, 0x74, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x6e, 0x67, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x69, 0x73,
	0x70, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x73, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x60, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x74,
	0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x6e, 0x67, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x69, 0x73, 0x70, 0x5f,
	0x64, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x6f, 0x0a, 0x0a, 0x49, 0x73, 0x70,
	0x44, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e, 0x12, 0x61, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x49, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x6d, 0x65, 0x5f,
	0x73, 0x6f, 0x6e, 0x67, 0x62, 0x61, 0x6e, 0x6b, 0x2e, 0x69, 0x73, 0x70, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x65, 0x72, 0x6e, 0x2e, 0x49, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x28,
	0x2e, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x74, 0x6d, 0x65, 0x5f, 0x73, 0x6f, 0x6e, 0x67, 0x62, 0x61,
	0x6e, 0x6b, 0x2e, 0x69, 0x73, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e, 0x2e, 0x49,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x2e, 0x0a, 0x0c, 0x74, 0x72,
	0x70, 0x63, 0x2e, 0x74, 0x6d, 0x65, 0x2e, 0x69, 0x73, 0x70, 0x42, 0x1e, 0x54, 0x4d, 0x45, 0x49,
	0x73, 0x70, 0x44, 0x69, 0x73, 0x63, 0x65, 0x72, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_isp_discern_proto_rawDescOnce sync.Once
	file_isp_discern_proto_rawDescData = file_isp_discern_proto_rawDesc
)

func file_isp_discern_proto_rawDescGZIP() []byte {
	file_isp_discern_proto_rawDescOnce.Do(func() {
		file_isp_discern_proto_rawDescData = protoimpl.X.CompressGZIP(file_isp_discern_proto_rawDescData)
	})
	return file_isp_discern_proto_rawDescData
}

var file_isp_discern_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_isp_discern_proto_goTypes = []interface{}{
	(*IpInfoReq)(nil), // 0: trpc.tme_songbank.isp_discern.IpInfoReq
	(*IpInfo)(nil),    // 1: trpc.tme_songbank.isp_discern.IpInfo
	(*IpInfoRsp)(nil), // 2: trpc.tme_songbank.isp_discern.IpInfoRsp
	nil,               // 3: trpc.tme_songbank.isp_discern.IpInfoRsp.ResultEntry
}
var file_isp_discern_proto_depIdxs = []int32{
	3, // 0: trpc.tme_songbank.isp_discern.IpInfoRsp.result:type_name -> trpc.tme_songbank.isp_discern.IpInfoRsp.ResultEntry
	1, // 1: trpc.tme_songbank.isp_discern.IpInfoRsp.ResultEntry.value:type_name -> trpc.tme_songbank.isp_discern.IpInfo
	0, // 2: trpc.tme_songbank.isp_discern.IspDiscern.GetIpInfo:input_type -> trpc.tme_songbank.isp_discern.IpInfoReq
	2, // 3: trpc.tme_songbank.isp_discern.IspDiscern.GetIpInfo:output_type -> trpc.tme_songbank.isp_discern.IpInfoRsp
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_isp_discern_proto_init() }
func file_isp_discern_proto_init() {
	if File_isp_discern_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_isp_discern_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isp_discern_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_isp_discern_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpInfoRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_isp_discern_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_isp_discern_proto_goTypes,
		DependencyIndexes: file_isp_discern_proto_depIdxs,
		MessageInfos:      file_isp_discern_proto_msgTypes,
	}.Build()
	File_isp_discern_proto = out.File
	file_isp_discern_proto_rawDesc = nil
	file_isp_discern_proto_goTypes = nil
	file_isp_discern_proto_depIdxs = nil
}
